import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:http/http.dart';
import 'package:shared_preferences/shared_preferences.dart';


Future<Autogenerated> fetchAuto() async {
  final prefs = await SharedPreferences.getInstance();
  final username = prefs.getString('username') ?? "";
  final key = prefs.getString('key') ?? "";
  if (username == "" || key == "")
    throw Exception;
  var bytes = utf8.encode("$username:$key");
  String encoded = base64.encode(bytes);
  final Response response =
  await http.get("https://frc-api.firstinspires.org/v2.0/2019", headers: {"Authorization": " Basic "+ encoded, "Accept":"application/json"});
  print(response.body);
  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Autogenerated.fromJson(jsonDecode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Please Enter or check your API Key');
  }
}

class Autogenerated {
  int eventCount;
  String gameName;
  String kickoff;
  int rookieStart;
  int teamCount;
  List<FrcChampionships> frcChampionships;

  Autogenerated(
      {this.eventCount,
        this.gameName,
        this.kickoff,
        this.rookieStart,
        this.teamCount,
        this.frcChampionships});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    eventCount = json['eventCount'];
    gameName = json['gameName'];
    kickoff = json['kickoff'];
    rookieStart = json['rookieStart'];
    teamCount = json['teamCount'];
    if (json['frcChampionships'] != null) {
      frcChampionships =  <FrcChampionships>[];
      json['frcChampionships'].forEach((v) {
        frcChampionships.add( FrcChampionships.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data =  Map<String, dynamic>();
    data['eventCount'] = this.eventCount;
    data['gameName'] = this.gameName;
    data['kickoff'] = this.kickoff;
    data['rookieStart'] = this.rookieStart;
    data['teamCount'] = this.teamCount;
    if (this.frcChampionships != null) {
      data['frcChampionships'] =
          this.frcChampionships.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class FrcChampionships {
  String name;
  String startDate;
  String location;

  FrcChampionships({this.name, this.startDate, this.location});

  FrcChampionships.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    startDate = json['startDate'];
    location = json['location'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data['name'] = this.name;
    data['startDate'] = this.startDate;
    data['location'] = this.location;
    return data;
  }
}


class StatusWidg extends StatefulWidget {
  StatusWidg({Key key}) : super(key: key);

  @override
  _StatusWidgState createState() => _StatusWidgState();
}

class _StatusWidgState extends State<StatusWidg> {
  Future<Autogenerated> futureAuto;

  @override
  void initState() {
    super.initState();
    futureAuto = fetchAuto();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Data Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Fetch Data Example'),
        ),
        body: Center(
          child: FutureBuilder<Autogenerated>(
            future: futureAuto,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                return Text(snapshot.data.eventCount.toString());
              } else if (snapshot.hasError) {
                return Text("${snapshot.error}");
              }

              // By default, show a loading spinner.
              return CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }
}